AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::ServerlessRepo::Application:
    Name: SparkOnLambda
    Description: The Application creates AWS Lambda with Spark. Run your spark loads
      75 to 80% less cost or FREE!! if you are within AWS Lambda free tier limits
    Author: AWS Project Bluebear
    SpdxLicenseId: MIT-0
    LicenseUrl: s3://aws-sam-cli-managed-default-samclisourcebucket-76pqbjbflwhw/8a8c86eb05582b8d50db705f2bc233c2
    ReadmeUrl: s3://aws-sam-cli-managed-default-samclisourcebucket-76pqbjbflwhw/e5bdb27811549e45b971f696424b12dc
    Labels:
    - spark
    - lambda
    - pyspark
    - serverless
    HomePageUrl: https://github.com/aws-samples/spark-on-aws-lambda
    SemanticVersion: 1.3.4
    SourceCodeUrl: https://github.com/aws-samples/spark-on-aws-lambda
Parameters:
  ImageUri:
    Description: 'Mandatory: ECR Uri for the image. If not present, then create and
      push using the sam-imagebuilder.yaml in the github https://github.com/aws-samples/spark-on-aws-lambda '
    Type: String
    Default: ''
  ScriptBucket:
    Type: String
    Description: 'Mandatory: Amazon S3 Bucket name where the spark script is stored.
      Just the bucket name e.g. bucket1'
  SparkScript:
    Type: String
    Description: 'Mandatory: Amazon S3 key where the spark script resides. Start without
      the /.eg: script/location/name.py'
  LambdaFunctionPrefix:
    Description: 'Optional: This is the prefix for the name of the lambda function
      that will be created. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    Default: SparkOnAWSLambda
  LambdaTimeout:
    Description: 'Optional: Maximum Lambda invocation runtime in seconds. (min 1 -
      900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Optional: Lambda memory in MB (min 128 - 10,240 max).'
    Default: 10240
    Type: Number
  LambdaEphemeralStorageSize:
    Description: 'Optional: An object that specifies the disk space, in MB (min 512
      - 10,240 max), available to your Lambda function in /tmp.'
    Default: 10240
    Type: Number
  SparkLambdapermissionPolicyArn:
    Description: 'Optional: Arn of the policy that contains the permissions your spark
      job will need to run successfully'
    Type: String
    Default: ''
  AttachToVpc:
    Type: String
    Description: 'Mandatory: Set True or False to imply VPC Connectivity'
    Default: true
    AllowedValues:
    - true
    - false
  SecurityGroupIds:
    Description: 'Optional: One or more SecurityGroup IDs corresponding to the SecurityGroup
      that should be applied to the Lambda function. (e.g. sg1,sg2,sg3).Only used
      if AttachToVpc is True'
    Type: CommaDelimitedList
    Default: sg-0f1d31bee653c056f
  SubnetIds:
    Description: 'Optional: One or more Subnet IDs corresponding to the Subnet that
      the Lambda function can use to access you data source. (e.g. subnet1,subnet2).Only
      used if AttachToVpc is True'
    Type: CommaDelimitedList
    Default: subnet-097c7c2e958a6e346,subnet-06f09bc2117df85e3,subnet-0ff2a104e27c6563d
  Command:
    Description: 'Optional: Command override for the image. This is not required'
    Type: CommaDelimitedList
    Default: sparkLambdaHandler.lambda_handler
  EntryPoint:
    Description: 'Optional: Entry Point override for the image'
    Type: CommaDelimitedList
    Default: ''
  WorkingDirectory:
    Description: 'Optional: Command override for the image'
    Type: String
    Default: ''
Conditions:
  NeedsVPC:
    Fn::Equals:
    - Ref: AttachToVpc
    - 'true'
  HasAdditionalPolicy:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: SparkLambdapermissionPolicyArn
  NeedsImageBuild:
    Fn::Not:
    - Fn::Equals:
      - Ref: ImageUri
      - ''
  HasEntryPoint:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Fn::Join:
        - ','
        - Ref: EntryPoint
  HasWorkingDirectory:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: WorkingDirectory
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role used by the lambda running spark
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::If:
        - HasAdditionalPolicy
        - Ref: SparkLambdapermissionPolicyArn
        - Ref: AWS::NoValue
      - Fn::If:
        - NeedsVPC
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
    Metadata:
      SamResourceId: LambdaRole
  LambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName:
        Fn::Sub: SparkOnLmandaDefaulPolicy-${AWS::StackName}
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - events:putevents
          Resource: '*'
        - Effect: Allow
          Action:
          - ecr:GetAuthorizationToken
          Resource: '*'
        - Effect: Allow
          Action:
          - ecr:BatchCheckLayerAvailability
          - ecr:GetDownloadUrlForLayer
          - ecr:BatchGetImage
          Resource:
            Fn::Sub:
            - arn:aws:ecr:${Region}:${Account}:repository/${RepositoryName}
            - Region:
                Fn::Select:
                - 3
                - Fn::Split:
                  - .
                  - Ref: ImageUri
              Account:
                Fn::Select:
                - 0
                - Fn::Split:
                  - .
                  - Ref: ImageUri
              RepositoryName:
                Fn::Select:
                - 1
                - Fn::Split:
                  - /
                  - Fn::Select:
                    - 0
                    - Fn::Split:
                      - ':'
                      - Fn::Select:
                        - 5
                        - Fn::Split:
                          - .
                          - Ref: ImageUri
        - Effect: Allow
          Action:
          - s3:ListBucket
          Resource:
            Fn::Sub: arn:aws:s3:::${ScriptBucket}
        - Effect: Allow
          Action:
          - s3:Get*
          Resource:
            Fn::Sub: arn:aws:s3:::${ScriptBucket}/${SparkScript}
      Roles:
      - Ref: LambdaRole
    Metadata:
      SamResourceId: LambdaPolicy
  SparkLambda:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        Trigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
              - custom.atvenuObfuscator
              detail-type:
              - obfuscate
      PackageType: Image
      FunctionName:
        Fn::Sub: ${AWS::StackName}
      ImageUri:
        Ref: ImageUri
      ImageConfig:
        Command:
          Ref: Command
        EntryPoint:
          Fn::If:
          - HasEntryPoint
          - Ref: EntryPoint
          - Ref: AWS::NoValue
        WorkingDirectory:
          Fn::If:
          - HasWorkingDirectory
          - Ref: WorkingDirectory
          - Ref: AWS::NoValue
      Description: Lambda to run spark containers
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
      EphemeralStorage:
        Size:
          Ref: LambdaEphemeralStorageSize
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      VpcConfig:
        Fn::If:
        - NeedsVPC
        - SecurityGroupIds:
            Ref: SecurityGroupIds
          SubnetIds:
            Ref: SubnetIds
        - Ref: AWS::NoValue
      Environment:
        Variables:
          SCRIPT_BUCKET:
            Ref: ScriptBucket
          SPARK_SCRIPT:
            Ref: SparkScript
    Metadata:
      SamResourceId: SparkLambda
